name: CI Pipeline

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc g++
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest (excluding MongoDB tests)
      run: |
        pytest tests/test_health_real.py tests/test_model.py tests/test_metrics_simple.py tests/test_predict.py -v --tb=short
    
    - name: Test app startup
      run: |
        python -c "from app import app; print('✅ App imports successfully')"
    
    - name: Test health endpoint
      run: |
        python -c "
        import requests
        import subprocess
        import time
        import sys
        
        # Start server in background
        process = subprocess.Popen(['uvicorn', 'app:app', '--host', '0.0.0.0', '--port', '8000'])
        time.sleep(10)
        
        try:
            response = requests.get('http://localhost:8000/health', timeout=10)
            if response.status_code == 200:
                print('✅ Health endpoint works')
            else:
                print(f'❌ Health endpoint failed: {response.status_code}')
                sys.exit(1)
        except Exception as e:
            print(f'❌ Health endpoint error: {e}')
            sys.exit(1)
        finally:
            process.terminate()
        "
